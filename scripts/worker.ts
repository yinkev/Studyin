#!/usr/bin/env tsx
import { setTimeout as sleep } from 'timers/promises';
import { createDevQueueAdapter } from '../lib/queue';
import { interactiveLessonSchema } from '../lib/types/lesson';
import { defaultLessonStorage } from '../lib/services/lessonService';
import { lessonCreatedEventSchema } from '../core/types/events';
import { globalEventBus } from '../lib/eventBus';

type UploadJobPayload = {
  fileName: string;
  fileSize: number;
  sourcePath?: string;
};

type UploadJobResult = {
  lessonId: string;
  outputPath: string;
};

const queue = createDevQueueAdapter<UploadJobPayload, UploadJobResult>();

async function processNext(): Promise<void> {
  const job = await queue.peek();
  if (!job) {
    return;
  }
  await queue.markProcessing(job.id);
  console.log(`[worker] processing job ${job.id} (${job.payload.fileName})`);
  const startedAt = Date.now();
  try {
    await sleep(500);

    const lesson = interactiveLessonSchema.parse({
      schema_version: '1.0.0',
      id: `lesson.${job.id}`,
      lo_id: 'lo.dev.stub',
      title: `Auto lesson for ${job.payload.fileName}`,
      summary: 'Generated by the dev worker stub. Replace this with AI pipeline output.',
      high_yield: [
        'High-yield placeholder derived from the job payload.',
        'Wire your AI content here to replace the stub.'
      ],
      pitfalls: ['This lesson was generated by the background worker stub.'],
      animation_timeline: [
        { beat: 0, duration_s: 4, narration: 'Highlight the uploaded file context.', visual: 'Hero card splash' },
        { beat: 1, duration_s: 5, narration: 'Introduce the learner objective.', visual: 'Text reveal' }
      ],
      content: [
        {
          type: 'multiple_choice_question',
          id: `mcq-${job.id}`,
          learningObjective: 'lo.dev.stub',
          stem: `What file kicked off this lesson?`,
          choices: [
            { id: 'A', text: job.payload.fileName },
            { id: 'B', text: 'The worker guessed randomly.' },
            { id: 'C', text: 'No idea, this is blank.' },
            { id: 'D', text: 'A secret system file.' }
          ],
          correctChoice: 'A'
        }
      ]
    });

    await defaultLessonStorage.save(lesson);

    const result = {
      lessonId: lesson.id,
      outputPath: `lesson:${lesson.id}`
    } satisfies UploadJobResult;

    await queue.complete(job.id, result);
    await globalEventBus.emit(
      lessonCreatedEventSchema.parse({
        type: 'LESSON_CREATED',
        lesson,
        jobId: job.id,
        ts: Date.now(),
        durationMs: Date.now() - startedAt
      })
    );
    console.log(`[worker] completed job ${job.id}`);
  } catch (error: any) {
    console.error(`[worker] job ${job.id} failed`, error);
    await queue.fail(job.id, error?.message ?? 'Unhandled worker error');
  }
}

async function main() {
  console.log('[worker] dev content factory online');
  while (true) {
    const start = Date.now();
    await processNext();
    const elapsed = Date.now() - start;
    if (elapsed < 1500) {
      await sleep(1500 - elapsed);
    }
  }
}

main().catch((error) => {
  console.error('[worker] fatal error', error);
  process.exit(1);
});
